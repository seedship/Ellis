PROGRAM appstart
%COMMENT = 'appstart v1'
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%NOBUSYLAMP

VAR

	--debug_logPs: FILE
	response: FILE

	STATUS: INTEGER

	write_log: INTEGER
	task: STRING[127]

ROUTINE is_tsk_done (task_name:STRING): BOOLEAN FROM appstart
ROUTINE moveto( s_task :STRING ) 				FROM appstart

BEGIN	
	
	IF UNINIT( task ) THEN 
		task = '###@@@###'
	ENDIF
			
	moveto(task)

	OPEN FILE response ('RW', 'RD:RESPONSE.HTM')	
	IF (STATUS <> 0) THEN
		WRITE response ( '{"result":"failed", "program":"', task ,'"}') 
	ELSE
		WRITE response ( '{"result":"success", "program":"', task ,'"}') 
	ENDIF

	CLOSE FILE response
END appstart

ROUTINE moveto
VAR
	tsk_done: BOOLEAN
	motion_ctrl: INTEGER
BEGIN
	
	motion_ctrl = 1 -- Semaphore to allow motion control
		
	CLEAR_SEMA (motion_ctrl) -- makes sure semaphore is zero before using it.
		
	RUN_TASK( s_task, 1, FALSE, FALSE, 1 OR 2 OR 4, STATUS )
	IF (STATUS <> 0) THEN
		WRITE ('CANNOT RUN: ', s_task, CR)
	ENDIF
							
	REPEAT
		tsk_done = is_tsk_done ( s_task )
		DELAY (2000)
	UNTIL ( tsk_done )
	
	POST_SEMA (motion_ctrl) -- makes motion_ctrl available immediately
END moveto

ROUTINE is_tsk_done
VAR
STATUS : INTEGER -- The status of the operation of GET_TSK_INFO
task_no : INTEGER -- Receives the current task number for task_name
attr_out: INTEGER -- Receives the TSK_STATUS output
dummy : STRING[2] -- Does not receive any information
BEGIN
	
	GET_TSK_INFO (task_name, task_no, TSK_STATUS, attr_out, dummy, STATUS)
	IF (attr_out = PG_ABORTED) THEN
		RETURN (TRUE) -- If task is aborted then return TRUE
	ENDIF
	RETURN(FALSE) -- otherwise task is not aborted and return

END is_tsk_done